/// Represents the different types of tokens in an arithmetic expression.
///
/// The `Token` enum is utilized during the lexical analysis (tokenization) phase of parsing
/// arithmetic expressions. Each variant corresponds to a fundamental component of the expression,
/// such as numbers, operators, parentheses, and identifiers. These tokens form the basic building
/// blocks that the parser will use to construct the abstract syntax tree (AST).
#[derive(Debug, PartialEq)]
pub(crate) enum Token {
    /// A numeric literal.
    ///
    /// Represents a constant integer value in the expression. This variant holds a 64-bit integer
    /// (`i64`) and is generated by the tokenizer when it encounters a sequence of digits.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::Number(42);
    /// ```
    Number(i64),

    /// The increment operator (`++`).
    ///
    /// Represents the increment operation in the expression, which increases the value of an
    /// expression by one. This token is produced by the tokenizer when it encounters the `++`
    /// sequence of characters.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::Increment;
    /// ```
    Increment,

    /// The decrement operator (`--`).
    ///
    /// Represents the decrement operation in the expression, which decreases the value of an
    /// expression by one. This token is produced by the tokenizer when it encounters the `--`
    /// sequence of characters.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::Decrement;
    /// ```
    Decrement,

    /// The left parenthesis (`(`).
    ///
    /// Represents the opening parenthesis in the expression, used to group sub-expressions and
    /// control the order of operations. This token is produced by the tokenizer when it encounters
    /// the `(` character.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::LParen;
    /// ```
    LParen,

    /// The right parenthesis (`)`).
    ///
    /// Represents the closing parenthesis in the expression, used to close groups of sub-expressions
    /// and control the order of operations. This token is produced by the tokenizer when it encounters
    /// the `)` character.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::RParen;
    /// ```
    RParen,

    /// An identifier (variable name).
    ///
    /// Represents a variable name in the expression. This token is produced by the tokenizer when it
    /// encounters a sequence of characters that match the pattern for valid identifiers.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::Identifier("x".to_string());
    /// ```
    Identifier(String),

    /// The `let` keyword.
    ///
    /// Represents the `let` keyword used for variable bindings in the expression. This token is
    /// produced by the tokenizer when it encounters the `let` keyword.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::Let;
    /// ```
    Let,

    /// The assignment operator (`=`).
    ///
    /// Represents the assignment operation in the expression, which assigns a value to a variable.
    /// This token is produced by the tokenizer when it encounters the `=` character.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::Assign;
    /// ```
    Assign,

    /// A line end (`;`).
    ///
    /// Represents the end of a statement or expression. This token is produced by the tokenizer
    /// when it encounters the `;` character.
    ///
    /// # Example
    ///
    /// ```rust
    /// let token = Token::LineEnd;
    /// ```
    LineEnd,
}
